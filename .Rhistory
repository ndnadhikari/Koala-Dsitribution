## Visualisation ============
ggplot() +
geom_sf(data = df_state, fill = NA) +  # Assuming Australia is an sf object
geom_point(data = df_with_state, aes(x = long, y = lat), color = "red", size = 1) +
theme_minimal() +
coord_sf(xlim = c(bbox$xmin, bbox$xmax),
ylim = c(bbox$ymin, bbox$ymax)) +  # Set the extent of the map
theme(axis.title = element_blank(),         # Remove axis titles
axis.text = element_blank(),          # Remove axis labels
panel.grid = element_blank())         # Remove grid lines
## Visualisation ============
ggplot() +
geom_sf(data = df_states, fill = NA) +  # Assuming Australia is an sf object
geom_point(data = df_with_state, aes(x = long, y = lat), color = "red", size = 1) +
theme_minimal() +
coord_sf(xlim = c(bbox$xmin, bbox$xmax),
ylim = c(bbox$ymin, bbox$ymax)) +  # Set the extent of the map
theme(axis.title = element_blank(),         # Remove axis titles
axis.text = element_blank(),          # Remove axis labels
panel.grid = element_blank())         # Remove grid lines
## Visualisation ============
# Plot with temp
ggplot() +
geom_sf(data = states,  fill = NA) +  # Assuming Australia is an sf object
geom_point(data = df_with_state, aes(x = long, y = lat, color = temp), size = 1) +
theme_minimal() +
coord_sf(xlim = c(bbox$xmin, bbox$xmax),
ylim = c(bbox$ymin, bbox$ymax)) +  # Set the extent of the map
theme(axis.title = element_blank(),         # Remove axis titles
axis.text = element_blank(),          # Remove axis labels
panel.grid = element_blank()) +       # Remove grid lines
labs(color = "Temperature")    +           # Changing legend title
scale_color_gradient(low = "blue", high = "red")
## Visualisation ============
# Plot with temp
ggplot() +
geom_sf(data = df_with_state,  fill = NA) +  # Assuming Australia is an sf object
geom_point(data = df_with_state, aes(x = long, y = lat, color = temp), size = 1) +
theme_minimal() +
coord_sf(xlim = c(bbox$xmin, bbox$xmax),
ylim = c(bbox$ymin, bbox$ymax)) +  # Set the extent of the map
theme(axis.title = element_blank(),         # Remove axis titles
axis.text = element_blank(),          # Remove axis labels
panel.grid = element_blank()) +       # Remove grid lines
labs(color = "Temperature")    +           # Changing legend title
scale_color_gradient(low = "blue", high = "red")
## Visualisation ============
# Plot with temp
ggplot() +
geom_sf(data = df_states,  fill = NA) +  # Assuming Australia is an sf object
geom_point(data = df_with_state, aes(x = long, y = lat, color = temp), size = 1) +
theme_minimal() +
coord_sf(xlim = c(bbox$xmin, bbox$xmax),
ylim = c(bbox$ymin, bbox$ymax)) +  # Set the extent of the map
theme(axis.title = element_blank(),         # Remove axis titles
axis.text = element_blank(),          # Remove axis labels
panel.grid = element_blank()) +       # Remove grid lines
labs(color = "Temperature")    +           # Changing legend title
scale_color_gradient(low = "blue", high = "red")
df_states
df_with_state$states
unique(df_with_state$states)
# [1] "Queensland"                   "South Australia"              "New South Wales"              "Victoria"
# [5] NA                             "Australian Capital Territory" "Northern Territory"           "Western Australia"
## Removing Na Columns
df_with_state <- df_with_state %>%  filter(states != "NA")
## Visualisation ============
# Plot with temp
ggplot() +
geom_sf(data = df_states,  fill = NA) +  # Assuming Australia is an sf object
geom_point(data = df_with_state, aes(x = long, y = lat, color = temp), size = 1) +
theme_minimal() +
coord_sf(xlim = c(bbox$xmin, bbox$xmax),
ylim = c(bbox$ymin, bbox$ymax)) +  # Set the extent of the map
theme(axis.title = element_blank(),         # Remove axis titles
axis.text = element_blank(),          # Remove axis labels
panel.grid = element_blank()) +       # Remove grid lines
labs(color = "Temperature")    +           # Changing legend title
scale_color_gradient(low = "blue", high = "red")
## Getting climate data ==========================
bbox <- st_bbox(df_states) # Get the bounding box equivalent to our data with states
## Visualisation ============
# Plot with temp
ggplot() +
geom_sf(data = df_states,  fill = NA) +  # Assuming Australia is an sf object
geom_point(data = df_with_state, aes(x = long, y = lat, color = temp), size = 1) +
theme_minimal() +
coord_sf(xlim = c(bbox$xmin, bbox$xmax),
ylim = c(bbox$ymin, bbox$ymax)) +  # Set the extent of the map
theme(axis.title = element_blank(),         # Remove axis titles
axis.text = element_blank(),          # Remove axis labels
panel.grid = element_blank()) +       # Remove grid lines
labs(color = "Temperature")    +           # Changing legend title
scale_color_gradient(low = "blue", high = "red")
## Getting climate data ==========================
bbox <- st_bbox(df_with_state) # Get the bounding box equivalent to our data with states
## Visualisation ============
# Plot with temp
ggplot() +
geom_sf(data = df_states,  fill = NA) +  # Assuming Australia is an sf object
geom_point(data = df_with_state, aes(x = long, y = lat, color = temp), size = 1) +
theme_minimal() +
coord_sf(xlim = c(bbox$xmin, bbox$xmax),
ylim = c(bbox$ymin, bbox$ymax)) +  # Set the extent of the map
theme(axis.title = element_blank(),         # Remove axis titles
axis.text = element_blank(),          # Remove axis labels
panel.grid = element_blank()) +       # Remove grid lines
labs(color = "Temperature")    +           # Changing legend title
scale_color_gradient(low = "blue", high = "red")
## Getting climate data ==========================
bbox <- st_bbox(df_states) # Get the bounding box equivalent to our data with states
## Visualisation ============
# Plot with temp
ggplot() +
geom_sf(data = df_states,  fill = NA) +  # Assuming Australia is an sf object
geom_point(data = df_with_state, aes(x = long, y = lat, color = temp), size = 1) +
theme_minimal() +
coord_sf(xlim = c(bbox$xmin, bbox$xmax),
ylim = c(bbox$ymin, bbox$ymax)) +  # Set the extent of the map
theme(axis.title = element_blank(),         # Remove axis titles
axis.text = element_blank(),          # Remove axis labels
panel.grid = element_blank()) +       # Remove grid lines
labs(color = "Temperature")    +           # Changing legend title
scale_color_gradient(low = "blue", high = "red")
## Plot with states
ggplot() +
geom_sf(data = states, fill = NA) +
geom_point(data = df_with_state, aes(x = long, y = lat, color = states, show.legend = T), size = 1) +
coord_sf(xlim = c(bbox$xmin, bbox$xmax),
ylim = c(bbox$ymin, bbox$ymax)) +  # Set the extent of the map
theme_minimal() +
theme(axis.title = element_blank(),   # Remove axis titles
axis.text = element_blank(),    # Remove axis labels
panel.grid = element_blank())   # Remove grid lines
## Plot with states
ggplot() +
geom_sf(data = states, fill = NA) +
geom_point(data = df_with_state, aes(x = long, y = lat, color = states, show.legend = T), size = 1) +
coord_sf(xlim = c(bbox$xmin, bbox$xmax),
ylim = c(bbox$ymin, bbox$ymax)) +  # Set the extent of the map
theme_minimal() +
labs(color = "States") +
theme(axis.title = element_blank(),   # Remove axis titles
axis.text = element_blank(),    # Remove axis labels
panel.grid = element_blank())   # Remove grid lines
typeof(df_states)
str(df_types)
str(df_states)
names(df_states)
## Visualisation ============
# Plot with temp
ggplot() +
geom_sf(data = df_with_state %>% dplyr::setect("states","geometry"),  fill = NA) +  # Assuming Australia is an sf object
geom_point(data = df_with_state, aes(x = long, y = lat, color = temp), size = 1) +
theme_minimal() +
coord_sf(xlim = c(bbox$xmin, bbox$xmax),
ylim = c(bbox$ymin, bbox$ymax)) +  # Set the extent of the map
theme(axis.title = element_blank(),         # Remove axis titles
axis.text = element_blank(),          # Remove axis labels
panel.grid = element_blank()) +       # Remove grid lines
labs(color = "Temperature")    +           # Changing legend title
scale_color_gradient(low = "blue", high = "red")
df_with_state %>% dplyr::setect("states","geometry")
## Visualisation ============
# Plot with temp
ggplot() +
geom_sf(data = df_with_state %>% dplyr::select("states","geometry"),  fill = NA) +  # Assuming Australia is an sf object
geom_point(data = df_with_state, aes(x = long, y = lat, color = temp), size = 1) +
theme_minimal() +
coord_sf(xlim = c(bbox$xmin, bbox$xmax),
ylim = c(bbox$ymin, bbox$ymax)) +  # Set the extent of the map
theme(axis.title = element_blank(),         # Remove axis titles
axis.text = element_blank(),          # Remove axis labels
panel.grid = element_blank()) +       # Remove grid lines
labs(color = "Temperature")    +           # Changing legend title
scale_color_gradient(low = "blue", high = "red")
convert.to.shapefile(df_with_state %>% dplyr::select("states","geometry"))
## Visualisation ============
# Plot with temp
library(shapefiles )
ggplot() +
geom_sf(data = df_with_state %>% dplyr::select("states","geometry") %>% t_transform(st_crs(4326)) %>%
st_cast('POLYGON'),  fill = NA) +  # Assuming Australia is an sf object
geom_point(data = df_with_state, aes(x = long, y = lat, color = temp), size = 1) +
theme_minimal() +
coord_sf(xlim = c(bbox$xmin, bbox$xmax),
ylim = c(bbox$ymin, bbox$ymax)) +  # Set the extent of the map
theme(axis.title = element_blank(),         # Remove axis titles
axis.text = element_blank(),          # Remove axis labels
panel.grid = element_blank()) +       # Remove grid lines
labs(color = "Temperature")    +           # Changing legend title
scale_color_gradient(low = "blue", high = "red")
ggplot() +
geom_sf(data = df_with_state %>% dplyr::select("states","geometry") %>% st_transform(st_crs(4326)) %>%
st_cast('POLYGON'),  fill = NA) +  # Assuming Australia is an sf object
geom_point(data = df_with_state, aes(x = long, y = lat, color = temp), size = 1) +
theme_minimal() +
coord_sf(xlim = c(bbox$xmin, bbox$xmax),
ylim = c(bbox$ymin, bbox$ymax)) +  # Set the extent of the map
theme(axis.title = element_blank(),         # Remove axis titles
axis.text = element_blank(),          # Remove axis labels
panel.grid = element_blank()) +       # Remove grid lines
labs(color = "Temperature")    +           # Changing legend title
scale_color_gradient(low = "blue", high = "red")
ggplot() +
geom_sf(data = df_with_state %>% dplyr::select("states","geometry") %>%
st_cast('POLYGON'),  fill = NA) +  # Assuming Australia is an sf object
geom_point(data = df_with_state, aes(x = long, y = lat, color = temp), size = 1) +
theme_minimal() +
coord_sf(xlim = c(bbox$xmin, bbox$xmax),
ylim = c(bbox$ymin, bbox$ymax)) +  # Set the extent of the map
theme(axis.title = element_blank(),         # Remove axis titles
axis.text = element_blank(),          # Remove axis labels
panel.grid = element_blank()) +       # Remove grid lines
labs(color = "Temperature")    +           # Changing legend title
scale_color_gradient(low = "blue", high = "red")
ggplot() +
geom_sf(data = df_with_state %>% dplyr::select("states","geometry"),  filngl = NA) +  # Assumi Australia is an sf object
geom_point(data = df_with_state, aes(x = long, y = lat, color = temp), size = 1) +
theme_minimal() +
coord_sf(xlim = c(bbox$xmin, bbox$xmax),
ylim = c(bbox$ymin, bbox$ymax)) +  # Set the extent of the map
theme(axis.title = element_blank(),         # Remove axis titles
axis.text = element_blank(),          # Remove axis labels
panel.grid = element_blank()) +       # Remove grid lines
labs(color = "Temperature")    +           # Changing legend title
scale_color_gradient(low = "blue", high = "red")
ggplot() +
geom_sf(data = df_with_state %>% dplyr::select("states","geometry"),  fill = NA) +  # Assumi Australia is an sf object
geom_point(data = df_with_state, aes(x = long, y = lat, color = temp), size = 1) +
theme_minimal() +
coord_sf(xlim = c(bbox$xmin, bbox$xmax),
ylim = c(bbox$ymin, bbox$ymax)) +  # Set the extent of the map
theme(axis.title = element_blank(),         # Remove axis titles
axis.text = element_blank(),          # Remove axis labels
panel.grid = element_blank()) +       # Remove grid lines
labs(color = "Temperature")    +           # Changing legend title
scale_color_gradient(low = "blue", high = "red")
View(df_with_state)
save.csv(df_with_state, "df_with_state.csv")
save(df_with_state, "df_with_state.csv")
write.csv(df_with_state, "data/df_with_state.csv")
View(df_states)
View(df_states)
head(df_states)
## Saving files
write.csv(df_with_state %>% dplyr::select(-geometry), "data/df_with_state.csv")
df_with_state %>% dplyr::select(-geometry)
## Saving files
write.csv(df_with_state %>% dplyr::filter(-geometry), "data/df_with_state.csv")
df_with_state %>% dplyr::select(-geometry)
df_with_state
## Saving files
df_csv = df_with_state %>% dplyr::select(-geometry)
df_csv
select(df_with_state, --geometry)
dplyr::select(df_with_state, --geometry)
dplyr::select(df_with_state, -geometry
)
dplyr::select(df_with_state, c(id, date, lat, long, states, temp, precip))
dplyr::select(df_with_state, c(id, date, lat, long, states, temp, precip)),
dplyr::select(df_with_state, c(id, date, lat, long, states, temp, precip))
## Saving files
write.csv( dplyr::select(-geometry), "data/df_with_state.csv")
## Saving files
write.csv( dplyr::select(-geometry), "data/df_with_state.csv")
## Saving files
write.csv(df_with_state %>% dplyr::select(-geometry), "data/df_with_state.csv")
write.csv(df_with_state %>% dplyr::select(-geometry), "data/df_with_state.csv")
st_write(df_states, "df_states.shp
)
)
}
>
)))
## Saving files
write.csv(df_with_state %>% dplyr::select(-geometry), "data/df_with_state.csv")
st_write(df_states, "df_states.shp")
st_write(df_states, "data/df_states.shp")
df_with_state
## Visualisation ============
## Showing the distribution of Koala by states
# Plot
ggplot(df_with_state, aes(x = states)) +
geom_bar(aes(y = (..count..)/sum(..count..) * 100)) +
labs(x = "States", y = "Percentage of Count",
title = "Percentage of Count Across Various States") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
## Visualisation ============
## Showing the distribution of Koala by states
# Plot
ggplot(df_with_state, aes(x = states)) +
geom_bar(aes(y = (..count..)/sum(..count..) * 100), fill = "dodgerblue") +
labs(x = "States", y = "Percentage of Count (%)",
title = "Percentage of Count Across Various States") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
## Showing the distribution of temperature by states
# Plot
ggplot(data, aes(x = states, y = temp)) +
geom_boxplot() +
labs(x = "States", y = "Temperature", title = "Distribution of Temperature by States")
## Showing the distribution of temperature by states
# Plot
ggplot(df_with_state, aes(x = states, y = temp)) +
geom_boxplot() +
labs(x = "States", y = "Temperature", title = "Distribution of Temperature by States")
## Showing the distribution of temperature by states
# Plot
ggplot(df_with_state, aes(x = states, y = temp)) +
geom_boxplot() +
labs(x = "States", y = "Temperature", title = "Distribution of Temperature by States") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
## Showing the distribution of precipitation by states
ggplot(df_with_state, aes(x = states, y = precip)) +
geom_boxplot() +
labs(x = "States", y = "Precipitation", title = "Distribution of Precipitation by States") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Plot
ggplot(data, aes(x = temp)) +
geom_histogram(bins = 10) +
facet_wrap(~ states, scales = "free_y") +
labs(x = "Temperature", y = "Count", title = "Histogram of Temperature Facet by States")
# Plot
ggplot(df_with_state, aes(x = temp)) +
geom_histogram(bins = 10) +
facet_wrap(~ states, scales = "free_y") +
labs(x = "Temperature", y = "Count", title = "Histogram of Temperature Facet by States")
# Plot
ggplot(df_with_state, aes(x = temp)) +
geom_histogram(aes(y = ..density.. * 100), bins = 10) +
# geom_histogram(bins = 10) +
facet_wrap(~ states, scales = "free_y") +
labs(x = "Temperature", y = "Count", title = "Histogram of Temperature Facet by States")
# Plot
ggplot(df_with_state, aes(x = precip)) +
geom_histogram(bins = 10) +
facet_wrap(~ states, scales = "free_y") +
labs(x = "Precipitation", y = "Count", title = "Histogram of Precipitation Facet by States")
# Plot
ggplot(df_with_state, aes(x = precip)) +
geom_histogram(bins = 10) +
facet_wrap(~ states, scales = "free_y") +
labs(x = "Precipitation", y = "Count", title = "Histogram of Precipitation Facet by States")+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
## Distribution plot of Koala temp in map visualisation
ggplot() +
geom_sf(data = df_states %>% dplyr::select("states","geometry"),  fill = NA) +  # Assuming Australia is an sf object
geom_point(data = df_with_state, aes(x = long, y = lat, color = temp), size = 1) +
theme_minimal() +
coord_sf(xlim = c(bbox$xmin, bbox$xmax),
ylim = c(bbox$ymin, bbox$ymax)) +  # Set the extent of the map
theme(axis.title = element_blank(),         # Remove axis titles
axis.text = element_blank(),          # Remove axis labels
panel.grid = element_blank()) +       # Remove grid lines
labs(color = "Temperature")    +           # Changing legend title
scale_color_gradient(low = "blue", high = "red")
## Visualisation ============
## Showing the distribution of Koala by states
# Plot
ggplot(df_with_state, aes(x = states)) +
geom_bar(aes(y = (..count..)/sum(..count..) * 100), fill = "dodgerblue") +
labs(x = "States", y = "Percentage of Count (%)",
title = "Percentage of Count Across Various States") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggsave("plots/distribution of kolah by states.png", plot = p, width = 10, height = 6, units = "in", dpi = 300)
## Visualisation ============
## Showing the distribution of Koala by states
# Plot
p1 <- ggplot(df_with_state, aes(x = states)) +
geom_bar(aes(y = (..count..)/sum(..count..) * 100), fill = "dodgerblue") +
labs(x = "States", y = "Percentage of Count (%)",
title = "Percentage of Count Across Various States") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggsave("plots/distribution of kolah by states.png", plot = p1, width = 10, height = 6, units = "in", dpi = 300)
## Showing the distribution of temperature by states
# Plot
p2<- ggplot(df_with_state, aes(x = states, y = temp)) +
geom_boxplot() +
labs(x = "States", y = "Temperature", title = "Distribution of Temperature by States") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggsave("plots/distribution of temp by states.png", plot = p2, width = 10, height = 6, units = "in", dpi = 300)
# Plot
p3 <- ggplot(df_with_state, aes(x = temp)) +
geom_histogram(bins = 10) +
facet_wrap(~ states, scales = "free_y") +
labs(x = "Temperature", y = "Count", title = "Histogram of Temperature Facet by States")
ggsave("plots/distribution of temp by states2.png", plot = p3 , width = 10, height = 6, units = "in", dpi = 300)
# Plot
p3 <- ggplot(df_with_state, aes(x = temp), fill = 'dodgerblue') +
geom_histogram(bins = 10) +
facet_wrap(~ states, scales = "free_y") +
labs(x = "Temperature", y = "Count", title = "Histogram of Temperature Facet by States")
p3
# Plot
p3 <- ggplot(df_with_state, aes(x = temp), color = 'dodgerblue') +
geom_histogram(bins = 10) +
facet_wrap(~ states, scales = "free_y") +
labs(x = "Temperature", y = "Count", title = "Histogram of Temperature Facet by States")
p3
# Plot
p3 <- ggplot(df_with_state, aes(x = temp), color = 'dodgerblue') +
geom_histogram(bins = 10, fill = "dodgerblue") +
facet_wrap(~ states, scales = "free_y") +
labs(x = "Temperature", y = "Count", title = "Histogram of Temperature Facet by States")
p3
ggsave("plots/distribution of temp by states2.png", plot = p3 , width = 10, height = 6, units = "in", dpi = 300)
## Showing the distribution of precipitation by states
p4 <- ggplot(df_with_state, aes(x = states, y = precip)) +
geom_boxplot() +
labs(x = "States", y = "Precipitation", title = "Distribution of Precipitation by States") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggsave("plots/distribution of precip by states.png", plot = p4 , width = 10, height = 6, units = "in", dpi = 300)
# Plot
p5 <-ggplot(df_with_state, aes(x = precip)) +
geom_histogram(bins = 10, fill = "dodgerblue") +
facet_wrap(~ states, scales = "free_y") +
labs(x = "Precipitation", y = "Count", title = "Histogram of Precipitation Facet by States")+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggsave("plots/distribution of precip by states2.png", plot = p5 , width = 10, height = 6, units = "in", dpi = 300)
## Distribution plot of Koala temp in map visualisation
p6 <- ggplot() +
geom_sf(data = df_states %>% dplyr::select("states","geometry"),  fill = NA) +  # Assuming Australia is an sf object
geom_point(data = df_with_state, aes(x = long, y = lat, color = temp), size = 1) +
theme_minimal() +
coord_sf(xlim = c(bbox$xmin, bbox$xmax),
ylim = c(bbox$ymin, bbox$ymax)) +  # Set the extent of the map
theme(axis.title = element_blank(),         # Remove axis titles
axis.text = element_blank(),          # Remove axis labels
panel.grid = element_blank()) +       # Remove grid lines
labs(color = "Temperature")    +           # Changing legend title
scale_color_gradient(low = "blue", high = "red")
ggsave("plots/distribution Koala map.png", plot = p6 , width = 10, height = 6, units = "in", dpi = 300)
## Plot with states
p7 <- ggplot() +
geom_sf(data = states, fill = NA) +
geom_point(data = df_with_state, aes(x = long, y = lat, color = states), size = 1) +
coord_sf(xlim = c(bbox$xmin, bbox$xmax),
ylim = c(bbox$ymin, bbox$ymax)) +  # Set the extent of the map
theme_minimal() +
labs(color = "States") +
theme(axis.title = element_blank(),   # Remove axis titles
axis.text = element_blank(),    # Remove axis labels
panel.grid = element_blank())   # Remove grid lines
ggsave("plots/distribution Koala map by states.png", plot = p7 , width = 10, height = 6, units = "in", dpi = 300)
## Visualisation ============
## Showing the distribution of Koala by states
# Plot
p1 <- ggplot(df_with_state, aes(x = states)) +
geom_bar(aes(y = (..count..)/sum(..count..) * 100), fill = "dodgerblue") +
labs(x = "States", y = "Percentage of Count (%)",
title = "Distribution Koala Occurrences Across Various States") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggsave("plots/distribution of kolah by states.png", plot = p1, width = 10, height = 6, units = "in", dpi = 300)
## Visualisation ============
## Showing the distribution of Koala by states
# Plot
p1 <- ggplot(df_with_state, aes(x = states)) +
geom_bar(aes(y = (..count..)/sum(..count..) * 100), fill = "dodgerblue") +
labs(x = "States", y = "Percentage of Count (%)",
title = "Distribution Koala Occurrences Across Various States from 2020 to 2024") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggsave("plots/distribution of kolah by states.png", plot = p1, width = 10, height = 6, units = "in", dpi = 300)
shiny::runApp('shinyapp')
df_with_states <- readr::read_csv("df_with_states.csv")
setwd("C:/Users/uqnadhik/OneDrive - The University of Queensland/Desktop/QCIF")
save.image("C:/Users/uqnadhik/OneDrive - The University of Queensland/Desktop/QCIF/shinyapp/shinyapp.Rproj.RData")
library(readr)
library(shiny)
library(shinythemes)
library(dplyr)
library(ggplot2)
library(sf)
## Loading data sets
df_with_states <- readr::read_csv("df_with_states.csv")
setwd("C:/Users/uqnadhik/OneDrive - The University of Queensland/Desktop/QCIF")
setwd("C:/Users/uqnadhik/OneDrive - The University of Queensland/Desktop/QCIF/shinyapp")
## Loading data sets
df_with_states <- readr::read_csv("df_with_states.csv")
## Loading data sets
df_with_states <- readr::read_csv("df_with_state.csv")
df_states      <- sf::read_sf('Australia/STE_2021_AUST_GDA2020.shp')
## Loading pacakges -----------------
# profvis({ # this is used to check memory and speed of data
library(readr)
library(shiny)
library(shinythemes)
library(dplyr)
library(ggplot2)
library(sf)
#
# library(scales)
# library(tidyr)
# library(plotly)
# library(devtools)
# library(forcats)
# library(shinyWidgets)
# library(devtools)
# library(profvis)
# library(gridExtra)
## Loading data sets
df_with_states <- readr::read_csv("df_with_state.csv")
View(df_with_states)
names(df_with_states)
## Basic clean
df_with_states <- df_with_states %>%
dplyr::select("id", "date", "lat", "long", "states", "temp", "precip", "geometry")
df_with_states
df_states      <- sf::read_sf('Australia/STE_2021_AUST_GDA2020.shp')
df_states      <- sf::read_sf('df_states.shp')
df_states
View(df_states)
setwd("C:/Users/uqnadhik/OneDrive - The University of Queensland/Desktop/QCIF/shinyapp")
